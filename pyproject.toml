[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=61",
]

[project]
name = "package-name-to-install-with"
description = "A small example package"
keywords = [
  "development",
  "packaging",
  "sample",
  "setuptools",
]
license = { file = "LICENSE.txt" } # license = { text = "AGPL-3.0-or-later" }
maintainers = [
  { name= "First Maintainer Name", email= "first.maintainer.email@example.com" },
  { name= "Second Maintainer Name", email= "second.maintainer.email@example.com" },
]
authors = [
  { name= "First Author Name", email= "first.author.email@example.com" },
  { name= "Second Author Name", email= "second.author.email@example.com" },
]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: Flake8",
  "Framework :: Pytest",
  "Framework :: Sphinx",
  "Intended Audience :: Developers",
  "License :: OSI Approved",
  "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development",
  "Topic :: Software Development :: Build Tools",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",
  "Typing :: Typed",
]
dynamic=[
  "readme", # readme = "README.md"
  "version", # version = "1.0.0"
]
dependencies = [
  "PySimpleGUI",
]
[project.optional-dependencies]
all = [
  "autoflake",
  "bandit",
  "black",
  "build",
  "codespell",
  "coverage[toml]",
  "docformatter",
  "flake8",
  "interrogate",
  "isort",
  "mypy",
  "nox",
  "pre-commit",
  "pydocstyle",
  "pylint",
  "pyproject-fmt",
  "pytest",
  "pyupgrade",
  "Sphinx",
  "sphinx-copybutton",
  "sphinx-rtd-theme",
  "twine",
  "validate-pyproject",
  "vulture",
]
dev = [
  "codespell",
  "nox",
  "pre-commit",
]
doc = [
  "Sphinx",
  "sphinx-copybutton",
  "sphinx-rtd-theme",
]
format = [
  "autoflake",
  "black",
  "docformatter",
  "isort",
  "pyproject-fmt",
  "pyupgrade",
]
lint = [
  "bandit",
  "flake8",
  "interrogate",
  "mypy",
  "pydocstyle",
  "pylint",
  "validate-pyproject",
  "vulture",
]
release = [
  "build",
  "twine",
]
test = [
  "coverage[toml]",
  "pytest",
]

[project.urls]
"Bug Tracker" = "https://github.com/yarnabrina/learn-python-packaging/issues"
"Home Page" = "https://github.com/yarnabrina/learn-python-packaging"
"Source Code" = "https://github.com/yarnabrina/learn-python-packaging"

[project.scripts]
console-calculator = "module_that_can_be_invoked_from_cli:console_calculator"

[project.gui-scripts]
gui-calculator = "module_that_can_invoke_gui_from_cli:gui_calculator"


[tool.autoflake]
in-place = true
remove-all-unused-imports = true
expand-star-imports = true
ignore-init-module-imports = true
remove-duplicate-keys = true
remove-unused-variables = true


[tool.black]
line-length = 99
target-version = [
  "py310",
  "py311",
]
safe = true


[tool.coverage.run]
branch = true
include = [
  "src/**/*.py",
]
omit = [
  "**/tests/*.py",
]

[tool.coverage.report]
include = [
  "src/**/*.py",
]
omit = [
  "**/tests/*.py",
]
fail_under = 80
precision = 2
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
]


[tool.docformatter]
in-place = true
wrap-summaries = 99
wrap-descriptions = 99


[tool.interrogate]
fail-under = 80
ignore-init-method = true


[tool.isort]
overwrite_in_place = true
profile = "black"
atomic = true
float_to_top = true
line_length = 99
remove_redundant_aliases = true
src_paths = "src"
py_version = 310


[tool.pydocstyle]
convention = "numpy"


[tool.pylint.main]
exit-zero = false
fail-under = 8.0
persistent = false
recursive = true
suggestion-mode = true

[tool.pylint.basic]
include-naming-hint = true

[tool.pylint.format]
max-line-length = 99

[tool.pylint.logging]
logging-format-style = "new"

[tool.pylint."messages control"]
enable = [
  "all",
]

[tool.pylint.reports]
output-format = "colorized"
reports = true
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true

[tool.pylint.variables]
allow-global-unused-variables = true
init-import = false


[tool.pytest.ini_options]
addopts = "--doctest-modules --doctest-ignore-import-errors --doctest-continue-on-failure"
console_output_style = "count"


[tool.setuptools]
py-modules = [
  "module_that_can_be_imported_directly",
  "module_that_can_be_invoked_from_cli",
  "module_that_can_invoke_gui_from_cli",
]

[tool.setuptools.dynamic]
version = { attr = "package_name_to_import_with.__version__" } # { attr = "module_with_version.__version__" }
readme = { file = "README.md", content-type = "text/markdown" }

[tool.setuptools.packages.find]
where = [
  "src",
]
include = [
  "package_name_to_import_with*",
]
exclude = [
  "*tests*",
]
namespaces = false

[tool.setuptools.package-data]
"package_name_to_import_with" = [
  "metadata.json",
  "py.typed",
]

[tool.setuptools.exclude-package-data]
"*" = [
  ".gitattributes",
  ".gitignore",
]


[tool.vulture]
min_confidence = 100
paths = [
  "src",
]
